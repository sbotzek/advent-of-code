<!-- livebook:{"persist_outputs":true} -->

# Advent of Code 2021 - Day 7

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])
```

```output
:ok
```

```elixir
example_input = Kino.Input.textarea("Please enter the example input:")
```

```elixir
my_input = Kino.Input.textarea("Please enter your input:")
```

```elixir
defmodule Parser do
  def parse_input(input) do
    input
    |> String.split(",", trim: true)
    |> Enum.map(&String.to_integer/1)
  end
end

example_input =
  example_input
  |> Kino.Input.read()
  |> Parser.parse_input()

my_input =
  my_input
  |> Kino.Input.read()
  |> Parser.parse_input()

:ok
```

```output
:ok
```

## Part 1

```elixir
defmodule Day7.Part1 do
  def solve(input) do
    {min, max} = Enum.min_max(input)

    min..max
    |> Enum.map(fn target_position ->
      input
      |> Enum.map(&abs(&1 - target_position))
      |> Enum.sum()
    end)
    |> Enum.min()
  end
end

Day7.Part1.solve(my_input)
```

```output
336721
```

## Part 2

```elixir
defmodule Day7.Part2 do
  def solve(input) do
    {min, max} = Enum.min_max(input)

    min..max
    |> Enum.map(fn target_position ->
      input
      |> Enum.map(&abs(&1 - target_position))
      |> Enum.map(&fuel_cost/1)
      |> Enum.sum()
    end)
    |> Enum.min()
  end

  defp fuel_cost(distance) do
    distance * (distance + 1) / 2
  end
end

Day7.Part2.solve(my_input)
```

```output
91638945.0
```
