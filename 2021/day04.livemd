<!-- vim: syntax=markdown -->
<!-- livebook:{"persist_outputs":true} -->

# Advent of Code 2021 - Day 4

## Utils

```elixir
defmodule Utils do
  def read_textarea(name) do
    Stream.iterate("", fn _ -> IO.gets(name) end)
    |> Stream.take_while(&(&1 != :eof))
    |> Enum.join("\r\n")
  end
end
```

```output
{:module, Utils, <<70, 79, 82, 49, 0, 0, 7, ...>>, {:read_textarea, 1}}
```

<!-- livebook:{"livebook_object":"cell_input","name":"example_input","type":"textarea","value":"7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1\n\n22 13 17 11  0\n 8  2 23  4 24\n21  9 14 16  7\n 6 10  3 18  5\n 1 12 20 15 19\n\n 3 15  0  2 22\n 9 18 13 17  5\n19  8  7 25 23\n20 11 10 24  4\n14 21 16 12  6\n\n14 21 17 24  4\n10 16 15  9 19\n18  8 23 26 20\n22 11 13  6  5\n 2  0 12  3  7"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"my_input","type":"textarea","value":"87,7,82,21,47,88,12,71,24,35,10,90,4,97,30,55,36,74,19,50,23,46,13,44,69,27,2,0,37,33,99,49,77,15,89,98,31,51,22,96,73,94,95,18,52,78,32,83,85,54,75,84,59,25,76,45,20,48,9,28,39,70,63,56,5,68,61,26,58,92,67,53,43,62,17,81,80,66,91,93,41,64,14,8,57,38,34,16,42,11,86,72,40,65,79,6,3,29,60,1\n\n 3 55 15 54 81\n56 77 20 99 25\n90 57 67  0 97\n28 45 69 84 14\n91 94 39 36 85\n\n52 60 30  7 36\n71 97 77 19 46\n 6  3 75 82 24\n 4 57  2 11 91\n56 84 23 43 48\n\n69 60 78 87 11\n79 30 93 39 63\n32 31 23 90 17\n57 98 13 46  9\n65 94 26 77 19\n\n87 68 81 63 95\n91 43 98 49 70\n67 46 12 10  3\n65 93 39 29 34\n45 35 78 40 59\n\n95 11 27 19 78\n 8 47 87 44 10\n48 83 93 52 23\n16 13 21  1  4\n69 12 40 39 81\n\n50 73 63 93 86\n55 76 33 22 75\n61 23 82 37 99\n26 29 85 74  2\n19 78 30 40  6\n\n58  2 95 92 78\n25 56 26  9 38\n43 83  4 87  8\n79 61 18 69 49\n24 29  5 41 89\n\n56  8 72 92  9\n34 26 28 66 22\n51 42 89 87 90\n98 48 40 18 19\n13 80 71 79 52\n\n87 77 82 38 48\n92 36 85 66 71\n97 29 94  9  1\n70 50 19 45 84\n43  6 72 54 89\n\n 9 60  6 17 14\n97  2 10 84  0\n 7 98 51  8 93\n54 77 37 36  1\n72 29 26 47 19\n\n92 22 25 19 36\n80 14 24 59 78\n29 45 88 54  4\n37 85 77 46  6\n42 52 43 26 72\n\n41 84 36 95 49\n22 17 83 47 99\n25 77 12 71 39\n76 73 60 79 85\n63 94 11 54 51\n\n88 29  7 26 45\n25 11  9 82 28\n43  5 41 70 39\n20 69 14 79 37\n78 59 98 93  6\n\n99 24 81 51 57\n56 47  7 50 66\n84 85 71 86 31\n17 74 90 26 73\n15 11 12 61 45\n\n61 27 84 49 21\n76 15  5  0  2\n35  7 79 77 20\n40 91 72 57 89\n11 33 18 42 78\n\n21 38 46 53 50\n49 10  9 59 67\n 3 51 96 44 63\n93 45 82 27 47\n69 92 41 85 95\n\n14 70  5  4 34\n59 98 53 45  7\n97 29 58  1 84\n19 69 37 93 57\n86 68 35 30 73\n\n38 21  7  1 43\n41  9 54  0 11\n51 94 99 75 72\n89 78 79  2 73\n18 90 85 84 10\n\n33 68  5 26  8\n51 85 20 49 58\n27 24 88 11 21\n 9 65 62 72 31\n95 53 12 14 83\n\n 1 22 76 11 56\n97 95 79 55 14\n20 53 27 77 23\n37 49 30 72 84\n91 68  8 18  5\n\n45 68  6 49 92\n43 90 20  1 78\n77 89  5 10 56\n84 28 73 62 72\n21 47 51 36 14\n\n30 71 52 21 13\n20  8 73 38 92\n17 50 59  3 14\n19 76 41  4 90\n57 25 94 82 62\n\n52 76 18 60  9\n29 38  5 96 63\n58 70 28 82  1\n40 49 43 25 19\n92 56 80 66 69\n\n58 60 90 33 92\n13 74  0 80 84\n77 97 51 70 56\n15 87 68 98 55\n 1 64 35  3 83\n\n77 43 69 58 34\n42 12 75 27 28\n74 54 30  2 15\n63 21 81 90  9\n 6 22 29 65 19\n\n60 89 43 26 86\n47 52 12 17 90\n56 54 96 37 75\n 3 80  0 19 85\n39 61 13 59 73\n\n94 59 82 21 68\n87 19 69 79 31\n64 57 72 43 25\n49  5 81 67 76\n95 16 58 52 51\n\n33 36  1 61 85\n11 74 37 89 30\n24 59 31 76 62\n 4 50 81 69 78\n66 57  9 94  7\n\n 6 20 26  2  9\n52 34 63 89 13\n16 65 30 29 27\n97 18 47 53 19\n79  7 38 33 39\n\n90 20 79 95 44\n 0 96 98 74 60\n80 65 36 93 67\n54 25 81 84 10\n21 56 83 14 66\n\n99  1 17 41 95\n66 29 47 74 43\n63 68 72 97 96\n92 79 13 93  4\n25 42 44 78 23\n\n17 19 98 55 14\n 2 35 42 22 64\n52 32 69 27 82\n85 16 89 41 81\n10 70 95 56 84\n\n64  4 94 51 35\n25 60 33 24 80\n59 40 14 47 93\n32 74 42 46 26\n49 75  7 95 79\n\n39 98 43 56 73\n92 63 13 61 36\n 4 34 35 10 11\n30 19 75 26 41\n54 37 65 15 58\n\n89 64 83 43 42\n71 32 25 63 34\n80 93 99 86 16\n31 33 94 27 91\n 8 17 81 41 85\n\n16 89 41 87 53\n27 29 64 30 81\n20 47 18  1 50\n56 82 93  4 45\n71 21 63 25 15\n\n61 12 97 41 32\n51 85 64 16 99\n68  2 43 10 86\n69  5 38 94 11\n92 74 20 83 90\n\n98 96 44 95 36\n63 42 56 24 21\n40  7 65 48 59\n18 11  2 58 13\n86 41  0 53 20\n\n 0 74 23 35 48\n21 34 97 10  2\n17 25 80 89 60\n15 27 94 68  7\n72 75 69 32 85\n\n29 72 40 13  9\n48 41 21 66 94\n20 23 42 53 84\n93 14  7 57 77\n67 36 10 81  0\n\n85 92 45 94 75\n58 79  9 98  5\n14 39 40 48 88\n96 61 36 62  7\n32 81 77  8 27\n\n78 80 98 62 87\n90 53 91 81 23\n46 15  4 63 74\n30  6 47 64 44\n12 45 95 68 99\n\n88  4 53 84 25\n71 36 20 46 74\n48 70  5 63 94\n15 65 78 33 67\n99 64 76 97 26\n\n64 96 69 13 60\n31 26 86 38 46\n35 90 45 97 40\n98 87 21 61  1\n27 67 77 29 66\n\n74 97 72 66  1\n34 50  2 57 33\n29 71 52 88 73\n16  7 39 40 24\n15 38 80 54 17\n\n22 99 67 95 97\n60 68 38 18 96\n89 46 57  8 11\n 7 12 61 83 35\n17 74 42 52 58\n\n10 19 44 12 41\n82 71  1 26 55\n52 88  6 97 48\n16 66 36 50 29\n67  2 65  0 45\n\n68 16 99 57 12\n36 50 32 19 91\n43 21 52 31 69\n41 82 37 49 75\n20 74 87 76 63\n\n81 10  7 80 78\n29 86  6 13 67\n19 12 23 54 68\n64 85 40 43 87\n16  5 59  3 34\n\n79 37 13 17 31\n56 22 24  7 58\n65 76 38 39 85\n45 36 90  3 66\n25 52 28 61 71\n\n18 20 21 74 33\n77 30 29 56 26\n86 49 44 75 62\n11 47 10 90 97\n64 94  6 43 67\n\n77 59 44 58 41\n85 30 22 56 19\n62 16 35 32 88\n91 94 34 51  9\n31 33 13 60 90\n\n94 56 72 12 59\n64 78  2 80 96\n41 99 69 21 79\n17 88 36 37 85\n89  7 66 15 84\n\n61 80 26 83 11\n62 42 51 79 31\n86 98 64 28 58\n 2 19 71 35 52\n14 34  0 32 44\n\n 1 50 76 15 12\n96 55 73 61 19\n74  0 79  5  8\n 3 36 53 67 52\n60 49 93 43 85\n\n71 75 35 44  1\n82 96 22 68 81\n19 25 52 62 97\n28 64 73 99 92\n38 60 42 70 20\n\n38 15 77 19 74\n 5 89 17 10 16\n96 48 40 42 57\n21 18 51 56 29\n86 63 25 45 93\n\n98 36 26 69  2\n70 75 18 89 81\n33 24 10 76 47\n28 59 54 49 58\n62 19 53 73 16\n\n96 84 52 86 47\n70 14 26 46 81\n90 53 66 16 87\n34  9 91 83 41\n61 29 13 49 77\n\n78 49 94 33 18\n91 83 55 73 44\n19  4 14  6  3\n45 28 57 12  9\n41  1 82 79 95\n\n74 38 35 88  6\n80 21 32  3 71\n 1 34 17  8  2\n94 24 84 26 91\n64 27 83 60 23\n\n93 18 27 52 28\n83 90 40  8 87\n21  3  4 99 26\n14 13 71 41 91\n20 63 69 38 30\n\n49 20 31 70  5\n37  7 94 85 84\n68 90 45  4  6\n96 46 10 97 63\n 9 89 34 25 52\n\n 9 79 30 87 53\n43  3 47 32  0\n59 29 44 11 98\n31 75 41 91 12\n 8 14 62 73 94\n\n43 52 60 16 61\n40  5 99 90 44\n35 78 83 75 64\n29 10 32 11 79\n59 18 72 54 30\n\n11 19 84 76 12\n 7 91 24 81 93\n 4 59 78 63 69\n46 72 74 43 28\n94 55 73 35  1\n\n51  6 64 31 82\n52 75 43 68 42\n95 49 21 63 46\n96 19 33 97 70\n 1 60 78 56 23\n\n73 40 83 36 26\n32 61 43 66 39\n63 15 34 98  3\n68 79 44 12 27\n 4 57 96  7 52\n\n63 77 12 89 17\n64 16 90 46 88\n33 65 58 55 85\n45 83 41 71 68\n57 81 56 13 15\n\n34 33 49 54 10\n97 77 14 22 59\n26 45 16 13 76\n 3 87 75 66 47\n 2 53 56 23 63\n\n42 38 69 33 96\n32 90 53  2 59\n56 22 45 11 54\n92 25  8 30 60\n75 41 19 79 70\n\n17 88 80 21  3\n96 91 27 15 72\n61 62  5 23 75\n67  8 37 40 65\n76 46 49 13 35\n\n90  7 11 28 54\n98 37 88 35 14\n12 20 71 44 80\n24 55 97 83  6\n36 59 66 48 26\n\n90 87 75 28  7\n32 14 80 62  6\n81 12 18 22 52\n51 89 16 41 93\n55  0 43 40 11\n\n28 49  8 75 21\n34 77 84 66 17\n 6 82 98 22  1\n20 93 94 96 40\n58 80 18 63 19\n\n94 63 36 29 53\n27 61 32 79 71\n 8 87 67 58  1\n78 97 88 28 12\n59 74 70 89 80\n\n48 37 57 42 26\n31 69 10  1 91\n23 38 99 79 49\n68 19 61 75 43\n90 59 30 94 44\n\n76 56 21 17 24\n73 59 71 46 50\n35  9 97 92 26\n33 98 30  7 34\n52  5 91 68 60\n\n35 63 55 99  8\n 2 94 66 29 14\n50 54 72 57 44\n90 34  9 69 95\n31 45 49 27 33\n\n62 14 84  0 85\n59 36 64 43 31\n47  4 33  8 24\n28 46 39 20 22\n 3 80 72 21 40\n\n19 92 34 62  2\n 7 98 44  3  5\n59 45 25 33 52\n85 87 65  9 89\n16 63 36 28 78\n\n72 84 91 77 93\n48 99 80 21 90\n52  6 15 86 47\n19 32 83 53 22\n94  1 61 38 10\n\n52  1 12 93 33\n59 11 82 96 10\n54 36 97 32 55\n 5  2 76 49 81\n48 60 62 98 27\n\n65 62  7 22 52\n19 91 53  9 81\n51 20 82 99 60\n24 72  3 49 54\n35 94 74 38 42\n\n60 28 11 10 35\n18 40 22 78 27\n53  3 52  1 63\n41 31 23 16 68\n70 98 42 84 33\n\n64 99 92 95 74\n35 86 87 33 40\n 3 79 13 44 39\n34 57 69 50 80\n 9 42 29 77  6\n\n22 71 46 44 88\n42 70 94 60 43\n50 92 95 57 63\n24 39 35 18 68\n28 34 77 81 91\n\n49 41 21 59 32\n44 46 19 20 22\n88 45 85 10 38\n84 18 70 77 11\n33 43 63  0 47\n\n86 23 32 30 25\n85 40 26 39 71\n88  3 72 93 19\n53 59 52 55 73\n51 58 90 49 81\n\n33 25 87 46 58\n90 55 53 82 54\n30 89 11 81 29\n41 83 28 35 94\n49 97 48 72 34\n\n86 22  0 27 89\n78 64 87 59 11\n85 19 60 61  3\n31 55 17 79  5\n93  4  1 26 66\n\n96 11 86 81 31\n28 37  7 64 36\n27 29  6 53 69\n30 21  8 50 60\n43  1 12 63 97\n\n81  3 10 25 41\n 4 54 96 45 51\n76 68 74 52 63\n26 77 21 82 69\n70  6 19 43 93\n\n63 72 20 36 53\n65 84 61 92 67\n28 15 69 52 68\n95 21 44 48 96\n93 78 94 62 91\n\n39 13 53 94  1\n95 42 48 93 79\n71 32 65  2 82\n96 22 99 46 54\n37 35 34 29 11\n\n52 40 66 96 26\n11 69 62 91 85\n58 92 75 48 71\n19 31 28 12 15\n99 76 90 87 98\n\n52 95 93  9 76\n11 63 68 89 17\n13  8 99 78 33\n14 53  6  4 47\n26 35 57 67 73\n\n96 71 14 40 34\n16 80 55 67 19\n36  4 63 91 61\n46 77 43 81 23\n22 54 79 76 89\n\n69 28 48 84 35\n31 86 58 91 45\n37 25 97 13 14\n65 32 80 99 23\n94 63 60 41 90\n\n19 47 13 80 58\n69 53 15 81 20\n21 39 70 22 26\n56 92 61 65 42\n96 76 86 87 41"} -->

## Part 1

```elixir
defmodule Board do
  def mark(board, drawn_number) do
    for row <- board do
      for number <- row do
        if drawn_number == number do
          -1
        else
          number
        end
      end
    end
  end

  def score(board, last_number) do
    board
    |> List.flatten()
    |> Enum.filter(fn number -> number != -1 end)
    |> Enum.sum()
    |> then(fn sum -> sum * last_number end)
  end

  def bingo?(board) do
    cond do
      row_bingo?(board) -> true
      col_bingo?(board) -> true
      true -> false
    end
  end

  defp row_bingo?(board) do
    Enum.any?(board, fn row ->
      Enum.all?(row, fn number ->
        number == -1
      end)
    end)
  end

  defp col_bingo?(board) do
    Enum.any?(0..4, fn col_num ->
      Enum.all?(0..4, fn row_num ->
        number =
          board
          |> Enum.at(row_num)
          |> Enum.at(col_num)

        number == -1
      end)
    end)
  end
end

defmodule Day4 do
  def solve(input) do
    {drawn_numbers, boards} = parse_input(input)
    {winner, last_number} = find_winning_board(drawn_numbers, boards)
    Board.score(winner, last_number)
  end

  defp find_winning_board([number | drawn_numbers], boards) do
    boards = Enum.map(boards, &Board.mark(&1, number))

    case Enum.find(boards, &Board.bingo?/1) do
      nil -> find_winning_board(drawn_numbers, boards)
      winner -> {winner, number}
    end
  end

  def parse_input(input) do
    {moves, input} = parse_moves(input)
    boards = parse_boards(input)
    {moves, boards}
  end

  defp parse_moves(input) do
    [moves_str, input] = String.split(input, ~r{\s}, trim: true, parts: 2)

    moves =
      moves_str
      |> String.split(",")
      |> Enum.map(&String.to_integer/1)

    {moves, String.trim(input)}
  end

  defp parse_boards(input) do
    input
    |> String.split(~r{\s}, trim: true)
    |> Enum.map(&String.to_integer/1)
    |> Enum.chunk_every(5)
    |> Enum.chunk_every(5)
  end
end

Day4.solve(Utils.read_textarea("example_input"))
Day4.solve(Utils.read_textarea("my_input"))
```

```output
89001
```

## Part2

```elixir
defmodule Day4.Part2 do
  def solve(input) do
    {drawn_numbers, boards} = Day4.parse_input(input)
    {winner, last_number} = find_last_winning_board(drawn_numbers, boards)
    Board.score(winner, last_number)
  end

  defp find_last_winning_board([number | drawn_numbers], boards) do
    {winning_boards, boards} =
      boards
      |> Enum.map(&Board.mark(&1, number))
      |> Enum.split_with(&Board.bingo?/1)

    case boards do
      [] -> {Enum.at(winning_boards, 0), number}
      _ -> find_last_winning_board(drawn_numbers, boards)
    end
  end
end

Day4.Part2.solve(Utils.read_textarea("example_input"))
Day4.Part2.solve(Utils.read_textarea("my_input"))
```

```output
7296
```
